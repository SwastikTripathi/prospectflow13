{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions/razorpayActions.ts"],"sourcesContent":["\n'use server';\n\nimport Razorpay from 'razorpay';\nimport crypto from 'crypto';\n\n// These should be environment variables in a real application.\n// Ensure these are set in your .env.local or hosting environment.\nconst RAZORPAY_KEY_ID = process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID;\nconst RAZORPAY_KEY_SECRET = process.env.RAZORPAY_KEY_SECRET;\n\ninterface CreateOrderParams {\n  amount: number; // Amount in paisa\n  currency: string;\n  receipt: string;\n  notes?: Record<string, any>;\n}\n\nexport async function createRazorpayOrder(params: CreateOrderParams) {\n  if (!RAZORPAY_KEY_ID || !RAZORPAY_KEY_SECRET) {\n    const errorMessage = \"Razorpay API Key ID or Secret is not defined in environment variables. Cannot create order.\";\n    return { error: errorMessage };\n  }\n\n  try {\n    const razorpayInstance = new Razorpay({\n      key_id: RAZORPAY_KEY_ID,\n      key_secret: RAZORPAY_KEY_SECRET,\n    });\n\n    const options = {\n      amount: params.amount,\n      currency: params.currency,\n      receipt: params.receipt,\n      notes: params.notes || {},\n    };\n\n    const order = await razorpayInstance.orders.create(options);\n    return {\n      order_id: order.id,\n      currency: order.currency,\n      amount: order.amount,\n    };\n  } catch (error: any) {\n    const specificError = error.error?.description || error.message || 'Failed to create Razorpay order due to an unknown server error.';\n    return { error: specificError };\n  }\n}\n\ninterface VerifyPaymentParams {\n  razorpay_order_id: string;\n  razorpay_payment_id: string;\n  razorpay_signature: string;\n}\n\nexport async function verifyRazorpayPayment(params: VerifyPaymentParams) {\n  if (!RAZORPAY_KEY_SECRET) {\n    const errorMessage = \"Razorpay Key Secret is not defined. Cannot verify payment.\";\n    return { success: false, error: errorMessage };\n  }\n\n  try {\n    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = params;\n    \n    const body = razorpay_order_id + \"|\" + razorpay_payment_id;\n\n    const expectedSignature = crypto\n      .createHmac('sha256', RAZORPAY_KEY_SECRET)\n      .update(body.toString())\n      .digest('hex');\n\n    if (expectedSignature === razorpay_signature) {\n      return { success: true, paymentId: razorpay_payment_id, orderId: razorpay_order_id };\n    } else {\n      return { success: false, error: 'Payment verification failed. Signature mismatch.' };\n    }\n  } catch (error: any) {\n    return { success: false, error: error.message || 'Payment verification failed due to an unknown server error.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAGA;AACA;;;;;;AAEA,+DAA+D;AAC/D,kEAAkE;AAClE,MAAM;AACN,MAAM,sBAAsB,QAAQ,GAAG,CAAC,mBAAmB;AASpD,eAAe,uCAAiB,GAAjB,oBAAoB,MAAyB;IACjE,IAAI,CAAC,mBAAmB,CAAC,qBAAqB;QAC5C,MAAM,eAAe;QACrB,OAAO;YAAE,OAAO;QAAa;IAC/B;IAEA,IAAI;QACF,MAAM,mBAAmB,IAAI,4IAAA,CAAA,UAAQ,CAAC;YACpC,QAAQ;YACR,YAAY;QACd;QAEA,MAAM,UAAU;YACd,QAAQ,OAAO,MAAM;YACrB,UAAU,OAAO,QAAQ;YACzB,SAAS,OAAO,OAAO;YACvB,OAAO,OAAO,KAAK,IAAI,CAAC;QAC1B;QAEA,MAAM,QAAQ,MAAM,iBAAiB,MAAM,CAAC,MAAM,CAAC;QACnD,OAAO;YACL,UAAU,MAAM,EAAE;YAClB,UAAU,MAAM,QAAQ;YACxB,QAAQ,MAAM,MAAM;QACtB;IACF,EAAE,OAAO,OAAY;QACnB,MAAM,gBAAgB,MAAM,KAAK,EAAE,eAAe,MAAM,OAAO,IAAI;QACnE,OAAO;YAAE,OAAO;QAAc;IAChC;AACF;AAQO,eAAe,uCAAmB,GAAnB,sBAAsB,MAA2B;IACrE,IAAI,CAAC,qBAAqB;QACxB,MAAM,eAAe;QACrB,OAAO;YAAE,SAAS;YAAO,OAAO;QAAa;IAC/C;IAEA,IAAI;QACF,MAAM,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,GAAG;QAEvE,MAAM,OAAO,oBAAoB,MAAM;QAEvC,MAAM,oBAAoB,qGAAA,CAAA,UAAM,CAC7B,UAAU,CAAC,UAAU,qBACrB,MAAM,CAAC,KAAK,QAAQ,IACpB,MAAM,CAAC;QAEV,IAAI,sBAAsB,oBAAoB;YAC5C,OAAO;gBAAE,SAAS;gBAAM,WAAW;gBAAqB,SAAS;YAAkB;QACrF,OAAO;YACL,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAmD;QACrF;IACF,EAAE,OAAO,OAAY;QACnB,OAAO;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAA8D;IACjH;AACF;;;IA7DsB;IAqCA;;AArCA,+OAAA;AAqCA,+OAAA","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/settings/billing/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/settings/billing/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/settings/billing/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/settings/billing/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/settings/billing/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/settings/billing/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}